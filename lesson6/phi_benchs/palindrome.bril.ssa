@main(in: int) {
  v1: int = const 10;
  v2: int = const 0;
  v3: int = const 1;
  v4: int = const 1;
  v5: bool = const true;
.for.cond:
  v23 = phi v12 v12 .if.true .if.false;
  v22 = phi v11 v11 .if.true .if.false;
  v21 = phi v10 v10 .if.true .if.false;
  v7 = phi v5 v14 v15 .Entry .if.true .if.false;
  v6 = phi v4 v13 v16 .Entry .if.true .if.false;
  br v7 .for.body .for.end;
.for.body:
  v9 = phi v7 .for.cond;
  v8 = phi v6 .for.cond;
  v10: int = call @pow v1 v8;
  v11: int = div in v10;
  v12: bool = eq v11 v2;
  br v12 .if.true .if.false;
.if.true:
  v13 = phi v8 .for.body;
  v14: bool = const false;
  jmp .for.cond;
.if.false:
  v15 = phi v9 .for.body;
  v16: int = add v13 v3;
  jmp .for.cond;
.for.end:
  v18 = phi v7 .for.cond;
  v17 = phi v6 .for.cond;
  v19: int = sub v17 v3;
  v20: bool = call @palindrome in v19;
  print v20;
}
@pow(base: int, exp: int): int {
  v1: int = const 1;
  v2: int = const 0;
  v3: int = const 1;
  v4: bool = const true;
.for.cond.pow:
  v21 = phi v11 v11 .if.true.pow .if.false.pow;
  v7 = phi v1 v13 v16 .Entry .if.true.pow .if.false.pow;
  v6 = phi exp v12 v17 .Entry .if.true.pow .if.false.pow;
  v5 = phi v4 v14 v15 .Entry .if.true.pow .if.false.pow;
  br v5 .for.body.pow .for.end.pow;
.for.body.pow:
  v10 = phi v7 .for.cond.pow;
  v9 = phi v6 .for.cond.pow;
  v8 = phi v5 .for.cond.pow;
  v11: bool = eq v9 v2;
  br v11 .if.true.pow .if.false.pow;
.if.true.pow:
  v13 = phi v10 .for.body.pow;
  v12 = phi v9 .for.body.pow;
  v14: bool = const false;
  jmp .for.cond.pow;
.if.false.pow:
  v15 = phi v8 .for.body.pow;
  v16: int = mul v13 base;
  v17: int = sub v12 v3;
  jmp .for.cond.pow;
.for.end.pow:
  v20 = phi v7 .for.cond.pow;
  v19 = phi v6 .for.cond.pow;
  v18 = phi v5 .for.cond.pow;
  ret v20;
}
@palindrome(in: int, len: int): bool {
  v3: bool = const false;
  v4: int = const 0;
  v5: int = const 2;
  v6: int = const 10;
  v7: bool = le len v4;
  br v7 .if.true.palindrome .if.false.palindrome;
.if.true.palindrome:
  v8: bool = const true;
  jmp .if.end.palindrome;
.if.false.palindrome:
  v9: int = call @pow v6 len;
  v10: int = div in v9;
  v11: int = div in v6;
  v12: int = mul v11 v6;
  v13: int = sub in v12;
  v14: bool = eq v10 v13;
  br v14 .if.true.mirror .if.false.mirror;
.if.true.mirror:
  v15: int = mul v9 v10;
  v16: int = sub in v15;
  v17: int = sub v16 v13;
  v18: int = div v17 v6;
  v19: int = sub len v5;
  v20: bool = call @palindrome v18 v19;
  jmp .if.end.palindrome;
.if.false.mirror:
  v21: bool = const false;
  jmp .if.end.palindrome;
.if.end.palindrome:
  v31 = phi v19 v19 .if.true.mirror .if.false.mirror;
  v30 = phi v18 v18 .if.true.mirror .if.false.mirror;
  v29 = phi v17 v17 .if.true.mirror .if.false.mirror;
  v28 = phi v14 v14 .if.true.mirror .if.false.mirror;
  v27 = phi v13 v13 .if.true.mirror .if.false.mirror;
  v26 = phi v12 v12 .if.true.mirror .if.false.mirror;
  v25 = phi v11 v11 .if.true.mirror .if.false.mirror;
  v24 = phi v10 v10 .if.true.mirror .if.false.mirror;
  v23 = phi v9 v9 .if.true.mirror .if.false.mirror;
  v22 = phi v8 v20 v21 .if.true.palindrome .if.true.mirror .if.false.mirror;
  ret v22;
}
